@*@using MtG_UCC.Models.Scryfall_Card;
@using Newtonsoft.Json;
@model Card

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="col-10 m-3 p-0 mx-auto">
    <div class="row w-100 justify-content-around m-0 p-0">
        <div class="col-3 p-0 m-0">
            @if (Model.ImageUris != null) {
                <div class="container h-100 p-0 m-0">
                    <div class="row">
                        <div class="m-0 p-0">
                            <img class="CardSearch" id="ImageDisplay" />
                        </div>
                    </div>
                </div>
                <script>
                    var imageUrl = ("@Model.ImageUris.Png");
                    var containerId = "@("ImageDisplay")";
                    var img = document.getElementById(containerId);

                    function displayCard(img) {
                        fetch(imageUrl)
                            .then(response => response.blob())
                            .then(blob => {
                                var reader = new FileReader();
                                reader.onloadend = function () {
                                    img.src = reader.result;
                                };
                                reader.readAsDataURL(blob);
                            });
                    }
                    displayCard(img);
                </script>
            } else if (Model.CardFaces != null && Model.CardFaces.FirstOrDefault().ImageUris != null) {
                <div class="container h-100 p-0 m-0">
                    <div class="row">
                        <div class="m-0 p-0">
                            <div class="position-relative">
                                <img class="CardSearch" id="FlipDisplay" />
                                <div class="tooltips swap-icon-alt" id="SwapIcon" data-placement="top" title="Click To View Reverse Side">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="#AAAAAA" viewBox="0 0 16 16">
                                        <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z" />
                                        <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>

                    <script>
                        function setupCardInstance() {
                            var currentFace = 0;
                            var faces = ["@Model.CardFaces[0].ImageUris.Png", "@Model.CardFaces[1].ImageUris.Png"];
                            var img = document.getElementById("FlipDisplay");

                            function displayCard(faceIndex) {
                                var imageUrl = faces[faceIndex];
                                img.src = imageUrl;
                            }

                            function swapCardFace() {
                                currentFace = (currentFace + 1) % faces.length;
                                displayCard(currentFace);
                            }

                            displayCard(0);

                            var swapIconDiv = document.getElementById("SwapIcon");
                            swapIconDiv.onclick = function () {
                                swapCardFace();
                            };
                        }

                        setupCardInstance();
                    </script>
                </div>
            }
        </div>
        <div class="col-9 p-0 m-0">
            <div class="row">
                <div class="input-group col-8">
                    @Html.LabelFor(m => m.Name, new { @class="form-label" })
                    @Html.DisplayFor(m => m.Name, new { @class="form-text" })
                </div>
                <div class="input-group col-4">
                    @Html.LabelFor(m => m.ManaCost, new { @class="form-label" })
                    @Html.DisplayFor(m => m.ManaCost, new { @class="form-text" })
                </div>
            </div>
            <div class="input-group">
                @Html.LabelFor(m => m.SetName, new { @class="form-label" })
                @Html.DisplayFor(m => m.SetName, new { @class="form-text" })
            </div>
            <div class="input-group">
                @Html.LabelFor(m => m.TypeLine, new { @class="form-label" })
                @Html.DisplayFor(m => m.TypeLine, new { @class="form-text" })
            </div>
        </div>
    </div>
</div>
@*
<div class="row">
    <div class="col-2">
        <iframe class="IconImage" id="IconContainer"></iframe>
        <script>
            var imageUrl = "@Model.SetIcon";
            var containerId = "IconContainer";
            var iframe = document.getElementById(containerId);

            function displayIcon(iframe) {
                iframe.src = imageUrl;
            }
            displayIcon(iframe);
        </script>
    </div>
    <div class="form-group col-10">
        @Html.TextBoxFor(m => m.SetName, new { @class = "form-control", @type = "hidden" })
        @Html.LabelFor(m => m.SetName, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.SetName, new { @class = "form-control", @disabled = "true" })
        @Html.ValidationMessageFor(m => m.SetName, String.Empty, new { @class = "text-danger" })
    </div>
</div>*@