@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>

    @await Html.PartialAsync("_SearchPartial", ViewData["Search"]);
</div>

<script>
    function toggleManaCheckbox(element) {
        if (element.classList.contains('form-control') || element.closest('.form-control')) {
            return;
        }

        const checkboxIcon = element.children[0];
        const selectElement = element.querySelector('.form-control');

        if(!selectElement) {
            return;
        }

        var selectId = selectElement.id;
        var newValue, oldValue;

        const selectedElement = document.getElementById(selectId);
        oldValue = selectedElement.value;

        if (checkboxIcon.classList.contains('undecided')) {
            checkboxIcon.classList.remove('undecided');
            checkboxIcon.classList.add('included');
            newValue = 1;
        } else if (checkboxIcon.classList.contains('included')) {
            checkboxIcon.classList.remove('included');
            checkboxIcon.classList.add('excluded');
            newValue = 2;
        } else if (checkboxIcon.classList.contains('excluded')) {
            checkboxIcon.classList.remove('excluded');
            checkboxIcon.classList.add('undecided');
            newValue = 0;
        }

        selectedElement.value = newValue;
        moveSelectedAttributeByValue(selectId, oldValue, newValue);
    }
    function moveSelectedAttributeByValue(selectId, sourceValue, targetValue) {
        const selectElement = document.getElementById(selectId);
        const options = Array.from(selectElement.options);

        for (var i = 0; i < options.length; i++) {
            if (options[i].value === sourceValue) {
                options[i].selected = false;
            }
            if (options[i].value === targetValue) {
                options[i].setAttribute('selected', 'selected');
                options[i].selected = true;
            }
        }
    }
</script>